/***
 This `build.gradle` file is organized into the following sections:

 1. Plugins: Define the plugins required for the project.
 2. Project Details: Domain, Environment, Configuration Properties.
 3. Java source and target compatibility: Configure the Java version.
 4. IDEA project configuration: Configure the IntelliJ IDEA project settings.
 5. Repositories: Define the repositories for fetching dependencies.
 6. External dependency versions: Set the versions for external dependencies.
 7. Dependencies: Define the project dependencies.
 8. Source sets configuration: Configure the source sets for the project.
 9. Maven publishing configuration: Configure the Maven publishing settings.
 10. Compiler options: Set the Java compiler options.
 11. Test execution configuration: Configure

 Explanation per Section is defined and provided

 1. Plugins: This section defines the required plugins for the project, such as 'java', 'groovy', 'maven-publish', and other experimental plugins
 2. Project Details: This section will be used to define and configure project-specific properties related to the domain, environment, and other configuration settings. This may include information like project group, version, description, and custom properties related to the build environment, such as target platforms, SDK versions, or environment variables
 3. Java source and target compatibility: This section configures the Java version for source and target compatibility using the 'javaVersion' property.
 4. IDEA project configuration: This section configures the IntelliJ IDEA project settings, including downloading Javadoc and sources.
 5. Repositories: This section defines the repositories for fetching dependencies, such as 'mavenCentral()' and 'google()'. 6.
 6. External dependency versions: This section sets the versions for external dependencies using variables like 'junitVersion', 'cucumberJavaVersion', and 'serenityVersion'.
 7. Dependencies: This section defines the project dependencies, including JUnit, Cucumber, Serenity, REST Assured, Appium Java client, Selenium WebDriver, and Groovy.
 8. Source sets configuration: This section configures the source sets for the project, specifying the main and test sources and resources directories.
 9. Maven publishing configuration: This section configures the Maven publishing settings, defining the publication and components.
 10. Compiler options: This section sets the Java compiler options, such as encoding and compiler arguments.
 11. Test execution configuration: This section configures the test execution, including setting system properties, Serenity properties, Cucumber properties, and WebDriver properties. Additionally, it configures test logging, test class directories, and classpath.
 */

// Section 1: Plugins
plugins {
   id 'net.serenity-bdd.serenity-gradle-plugin' version '3.5.0+'
   id 'java'
   id 'org.gradle.java-library'
   id 'groovy'
   id 'idea'
   id 'eclipse'
   id 'java-test-fixtures'
   id 'maven-publish'  // handle publishing artifacts to Maven repo
   // Experimenting with plugins
   id 'com.jfrog.bintray' version '1.8.5+'
   id 'com.intershop.gradle.jiraconnector' version '6.3.0'
   id 'nu.studer.credentials' version '2.1'
   id 'application'
   id 'io.qameta.allure' version '2.11.2+'
}

// Section 2: Project Details: Domain, Environment, Configuration Properties
// Load project properties
def loadProjectProperties() {
   def properties = new Properties()
   def propertiesFile = file('project.properties')
   if (propertiesFile.exists()) {
      properties.load(propertiesFile.newDataInputStream())
   }
   return properties
}

def projectProperties = loadProjectProperties()
ext {
   jiraBaseUrl = projectProperties.getProperty('jiraBaseUrl')
   jiraUsername = projectProperties.getProperty('jiraUsername')
   jiraPassword = projectProperties.getProperty('jiraPassword')
   jiraDetailsPath = projectProperties.getProperty('jiraDetailsPath')
}

def envProperties = new Properties()
file("env.properties").withInputStream { envProperties.load(it) }

// Load Serenity properties
Properties serenityProperties = new Properties()
file(projectProperties.getProperty('serenityPropertiesPath')).withInputStream { serenityProperties.load(it) }

// Load Cucumber properties
Properties cucumberProperties = new Properties()
file(projectProperties.getProperty('cucumberPropertiesPath')).withInputStream { serenityProperties.load(it) }

group = projectProperties.getProperty('group')
version = projectProperties.getProperty('version')
description = projectProperties.getProperty('description')


import com.github.dockerjava.api.command.CreateServiceCmd
import org.gradle.process.internal.ExecException
import au.com.bytecode.opencsv.CSVReader

// Section 3: Java source and target compatibility
sourceCompatibility = JavaVersion.toVersion(properties['javaVersion'])
targetCompatibility = JavaVersion.toVersion(properties['javaVersion'])

jar {
   archiveBaseName = projectProperties.getProperty('description')
   archiveVersion =  projectProperties.getProperty('version')
}

// Section 4: IDEA project configuration
idea {
   module {
      downloadJavadoc = true
      downloadSources = true
   }
}

wrapper {
   gradleVersion = project.gradleVersion
}
// Section 5: Repositories
repositories {
   mavenCentral()
   google()
}

configurations.configureEach {
   resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
   resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
   resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'org.codehaus.groovy' && details.requested.name == 'groovy') {
         details.useVersion '3.0.16'
      }
   }
}

configurations {
   cucumberRuntime {
      extendsFrom testImplementation
   }
}

configurations {
   runtimeClasspath {
      extendsFrom testImplementation
   }
}


// Section 6: External dependency versions
//
// Note - Adding a '+' value at the end of the integer implicates that version or newer
ext {
   junitVersion = '5.9.2'
   cucumberJavaVersion = '7.11.2'
   cucumberJUnitPlatformEngineVersion = '7.11.2'
   serenityVersion = '3.7.1+'
   serenityCoreVersion = '3.3.6'
   serenityJUnit5Version = '3.6.12+'
   serenityCucumberVersion = '3.6.22'
   groovyMavenPluginVersion = '1.5'
   slf4jApiVersion = '2.0.7'
   restAssuredVersion = '5.3.0'
   seleniumVersion = '4.8.1'
   hamcrestVersion = '2.2'
   xrayJunitExtensionsVersion = '0.6.1'
   opencsvVersion = '5.7.0'
}

// Section 7: Dependencies
dependencies {
   // JUnit and Cucumber
   testImplementation 'junit:junit:4.13.1' // JUnit 4 for backward compatibility
   testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
   testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
   testImplementation "io.cucumber:cucumber-java:${cucumberJavaVersion}"
   testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberJUnitPlatformEngineVersion}"

   // Serenity
   testImplementation "org.slf4j:slf4j-simple:${slf4jApiVersion}"
   implementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}"
   testImplementation "net.serenity-bdd:serenity-cucumber:${serenityCucumberVersion}"
   implementation "net.serenity-bdd:serenity-cli:${serenityVersion}"
   implementation 'net.serenity-bdd:serenity-report-resources:${serenityVersion}' // Use the latest version
   implementation("net.serenity-bdd:serenity-junit5:${serenityJUnit5Version}") {
      exclude group: 'org.seleniumhq.selenium', module: 'selenium-java'
   }

   // REST Assured
   testImplementation "io.rest-assured:spring-web-test-client:${restAssuredVersion}"

   // WinAppDriver and Selenium WebDriver
   implementation 'io.appium:java-client:8.3.0' // Appium Java client
   testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"

   // Groovy and Maven
   implementation "org.codehaus.mojo:groovy-maven-plugin:${groovyMavenPluginVersion}"
   implementation 'org.codehaus.groovy:groovy-all:2.4.15'
   testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"

   // Logging
   configurations {
      all {
         exclude group: 'org.sonatype.gossip', module: 'gossip'
      }
   }
   implementation "org.slf4j:slf4j-simple:${slf4jApiVersion}"

   // Experiment
   testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
   testImplementation "app.getxray:xray-junit-extensions:${xrayJunitExtensionsVersion}"
   implementation "com.opencsv:opencsv:${opencsvVersion}"
}

// Section 8: Source sets configuration
sourceSets {
   main {
      java {
         srcDir 'src/main/java'
         srcDir 'src/main/groovy'
         srcDir 'src/main/kotlin'
      }
      resources {
         srcDirs = ['src/main/resources', 'src/main/groovy-resources']
      }
   }
   test {
      java {
         srcDir 'src/test/java'
         srcDir 'src/test/groovy'
         srcDir 'src/test/kotlin'
      }
      resources {
         srcDirs = ['src/test/resources', 'src/test/groovy-resources']
      }
   }
}

// Section 9: Maven publishing configuration
publishing {
   publications {
      mavenJava(MavenPublication) {
         from components.java
      }
      /*repositories {
         maven {
            url = uri(project.properties['mavenRepositoryUrl'])
            credentials {
               username = project.properties['mavenRepositoryUsername']
               password = project.properties['mavenRepositoryPassword']
         }
      }*/
   }
}
// Section 11: Test execution configuration
test {
   // Use JUnit Platform for running tests
   useJUnitPlatform()

   // Set the test working directory
   workingDir = file('src/test')

   // Set default value for selected environment
   def selectedEnv = project.findProperty('selectedEnv') ?: 'default'

   // Load environment-specific properties
   envProperties.entrySet().each { entry ->
      if (entry.key.startsWith("$selectedEnv.")) {
         systemProperty entry.key - "$selectedEnv.", entry.value
      }
   }

   // Set system properties
   doFirst {
      systemProperties System.getProperties()
      // Get cucumber tags from command line or use default empty string
      def cucumberTags = project.findProperty('cucumber.tags') ?: ""

      // Update the 'cucumber.filter.tags' property with the new value
      systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")

      // Set WebDriver properties
      systemProperty "webdriver.base.url", project.findProperty("webdriver.base.url") ?: "http://localhost:8080"

      // Configure test logging
      testLogging.showStandardStreams = true
      // Set test class directories and classpath
      testClassesDirs = sourceSets.test.output.classesDirs
      classpath = sourceSets.test.runtimeClasspath
   }

// Set Serenity properties
   serenityProperties.each { key, value ->
      systemProperty key, value
   }

// Set Cucumber properties
   cucumberProperties.each { key, value ->
      systemProperty key, value
   }

   testLogging {
      events 'passed', 'skipped', 'failed'
   }
}

gradle.startParameter.continueOnFailure = true

defaultTasks 'clean', 'verify', 'tasks', 'test', 'list'

application {
   mainClass.set('net.serenitybdd.cucumber.cli.Main')
   mainClass.set('net.serenitybdd.cli.SerenityCLI')
   mainClassName = 'com/company/automate/Main.java'
}


tasks {
   // Compile and package the application code
   assemble {
      doFirst {
          exec {
             compileJava
             compileGroovy
             commandLine 'mvn', 'net.serenity-bdd.maven.plugins:serenity-maven-plugin:3.5.1:aggregate'
             application
          }
      }
   }
   // Run the Serenity CLI task
   serenity {
      dependsOn assemble
      doFirst {
            javaexec {
            main = "net.serenitybdd.cucumber.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty',
                    '--glue', project.findProperty('cucumber.glue') ?: 'com.company.steps',
                    project.findProperty('cucumber.features') ?: 'src/test/resources']
            errorOutput = System.err
            ignoreExitValue = true
         }
      }
      doLast {
         javaexec {
            main = 'net.serenitybdd.cli.SerenityCLI'
            classpath = configurations.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
            args = ['aggregate']
            systemProperty "serenity.test.root", project.findProperty("serenity.test.root") ?: "src/test/java"
            systemProperty "serenity.requirements.directory", project.findProperty("serenity.requirements.dir") ?: "src/test/resources/features"
            errorOutput = System.err
            ignoreExitValue = true
         }
      }
   }


}

tasks.register('deleteBuilds') {
   doLast {
      delete 'build'
      delete '.gradle'
      delete 'target'
      delete '.idea'
      delete 'out'
      // delete 'lib'
   }
}

tasks.register('printEnvVariables') {
   doLast {
      exec {
         commandLine 'printenv'
      }
   }
}

tasks.register('verifyEnvironment') {
   doLast {
      try {
         exec {
            commandLine 'java', '--version'
            ignoreExitValue true
            commandLine 'groovy', '--version'
            ignoreExitValue true
            commandLine 'mvn', '--version'
            ignoreExitValue true
            commandLine 'gradle', '--version'
            ignoreExitValue true
         }
      } catch (ExecException e) {
         println "One or more commands are not installed: ${e.message}"
      }
   }
}

tasks.register('list') {
   doLast {
      gradleTasks()
      genericTasks()
   }
}

tasks.register('updateJiraStatus') {
   doLast {
      def jiraUrl, jiraIssueKey, jiraTransitionId, jiraUsername, jiraPassword

      // Load Jira properties from the project.properties file
      jiraUrl = project.property('jiraBaseUrl')
      jiraUsername = project.property('jiraUsername')
      jiraPassword = project.property('jiraPassword')

      // Read the details from the jira_details.csv using the path from the project.properties file
      def jiraDetailsPath = project.property('jiraDetailsPath')
      def csvFile = new File(jiraDetailsPath)
      CSVReader reader = new CSVReader(new FileReader(csvFile))
      String[] nextLine
      while ((nextLine = reader.readNext()) != null) {
         def key = nextLine[0]
         def value = nextLine[1]
         switch (key) {
            case 'jiraIssueKey':
               jiraIssueKey = value
               break
            case 'jiraTransitionId':
               jiraTransitionId = value
               break
            default:
               println "Unknown key: ${key}"
         }
      }

      def json = "{\"transition\":{\"id\":\"${jiraTransitionId}\"}}"
      def url = "${jiraUrl}/rest/api/2/issue/${jiraIssueKey}/transitions"

      def command = ["curl", "-D-", "-u", "${jiraUsername}:${jiraPassword}", "-X", "PUT", "-H", "Content-Type: application/json", "-d", json, url]
      def process = command.execute()
      process.waitFor()

      println process.text
   }
}

// Define jiraConnector extension
ext.jiraConnector = [
        qualityAutomation: "Your JIRA Connector Configuration"
]

def gradleTasks() {
   println "\nGradle Custom Tasks"
   println "\tInitial : gradle --full-stacktrace; alias gradlew=\"./gradlew\""
   println "\tDisplay List Custom Tasks : gradlew list"
   println "\tCompile Java & Groovy : gradlew compileJava; gradlew compileGroovy"
}

def genericTasks() {
   println "\nGeneral Custom Tasks"
   println "\tDisplay Local Environments   : gradlew printEnvVariables"
   println "\tDisplay Current Versions     : gradlew printSetupVersions"
   println "\tUpgrade Gradle Version       : gradlew --gradle-version <_._>"
   println "\tDisplay Remove Build Folders : gradlew deleteBuilds"
   println "\tDisplay Gradle Default Tasks : gradlew task"
   println "\tExecute Test Suites          : gradlew test"
   println "\tDebug Argument Options       : gradlew --info|--debug|--full-stacktrace"
   println "\tDebug Dependency Reports     : gradlew dependencyInsight --dependency <org.company.package:dependency>"
   println "\tExecute Test Suites          : gradlew test"
   println "\tDebug :                      : --info --debug --full-stacktrace"
}